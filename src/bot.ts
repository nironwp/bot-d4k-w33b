/* eslint-disable @typescript-eslint/no-explicit-any */
import { Markup, Telegraf } from 'telegraf';
import * as fs from 'fs';
import moment from 'moment-timezone';
import path from 'path';
import 'dotenv/config';
import { Order, PrismaClient, Upssel } from '@prisma/client';
import startBotMessage from './bot/start';
import generatePayment from './bot/generatePayment';
import createCustomPayment from './bot/createCustomPayment';
import cron from 'node-cron';
import { obterPagamento } from './src/lib/mercadopago';
import mpcredentials from './src/lib/mpcredentials';
import createTxid from './createTxid';
import { InlineKeyboardButton } from 'telegraf/typings/core/types/typegram';
const prisma = new PrismaClient();
async function startBot(bot_name: string, bot_token: string, log_channel_id: string) {
	console.log(`Initing ${bot_name}: sending log to ${log_channel_id}`)
	const bot = new Telegraf(
		bot_token
	);
	bot.start(async (ctx) => {
		await prisma.possibleLead.create({
			data: {
				chatId: ctx.chat.id,
				bot_sended: bot_name,
			},
		});
		return startBotMessage(ctx, bot, log_channel_id);
	});


	bot.action('clicked_again', (ctx) => {
		return ctx.reply(
			'ùôãùôñùôßùôñ ùôòùô§ùô£ùô©ùôûùô£ùô™ùôñùôß ùôñ ùôüùô§ùôßùô£ùôñùôôùôñ ùôñùô§ ùô•ùôßùôñùôØùôöùôß ùô®ùôöùô¢ ùô°ùôûùô¢ùôûùô©ùôöùô®, ùôöùô®ùôòùô§ùô°ùôùùôñ ùô™ùô¢ùôñ ùôôùôñùô® ùô§ùô•ùôòÃßùô§ÃÉùôöùô® ùôñùôúùô§ùôßùôñ ‚Äì ùôßùôñÃÅùô•ùôûùôôùô§, ùôõùôñÃÅùôòùôûùô° ùôö ùô®ùôöùôúùô™ùôßùô§.'
		);
	});

	bot.action('amostras_jovenzinhas', async (ctx) => {
		await ctx.replyWithVideo({
			source: fs.createReadStream(
				path.resolve('assets/md/midia01-jovenzinhas.mp4')
			),
		});
		await ctx.replyWithVideo({
			source: fs.createReadStream(
				path.resolve('assets/md/midia02-jovenzinhas.mp4')
			),
		});

		await ctx.replyWithVideo({
			source: fs.createReadStream(
				path.resolve('assets/md/midia03-jovenzinhas.mp4')
			),
		});

		setTimeout(async () => {
			const tx = createTxid();
			const message = await ctx.reply(
				'ùô¥ùöúùöúùöé ùöêùöõùöûùöôùöò ùöÖùô∏ùôø ùöéÃÅ ùöåùöòùöóùöùùöéÃÅùöûùöçùöò ùöûÃÅùöóùöíùöåùöò  ùöéùöñ ùööùöûùöé ùöüùöòùöåùöéÃÇ ùöóùöäÃÉùöò ùöüùöäùöí ùöéùöóùöåùöòùöóùöùùöõùöäùöõ ùöéùöñ ùöóùöéùöóùöëùöûùöñ ùöòùöûùöùùöõùöò ùöïùöûùöêùöäùöõ ùöçùöò ùöùùöéùöïùöéùöêùöõùöäùöñ ùöçùöé ùöÅ$ùü∑ùü∏ùü∂ ùöôùöòùöõ ùöÅ$19,9ùü∂ ùë∫ùë∂ùë¥ùë¨ùëµùëªùë¨ ùëØùë∂ùë±ùë¨',
				Markup.inlineKeyboard([
					Markup.button.callback('ùó§ùó®ùóòùó•ùó¢ ùóñùó¢ùó†ùó£ùó•ùóîùó• ‚úÖ', `select_${tx}`),
				])
			);

			if (!message) return;
			const messageId = message.message_id;
			bot.action(`select_${tx}`, async (ctx_2) =>
				await ctx_2.telegram.editMessageReplyMarkup(
					ctx.chat?.id,
					messageId,
					undefined,
					{
						inline_keyboard: [
							[
								Markup.button.callback(
									'ùôÄùôéùòæùôäùôáùôÉùòº ùòæùôäùôàùôä ùòøùôÄùôéùôÄùôÖùòº ùòºùòøùôåùôêùôÑùôçùôÑùôç ‚úÖ',
									'clicked_again'
								),
							],
							[
								Markup.button.callback('ùêèùê¢ùê± ‚ùñ', 'payment_jovenzinhas_pix'),
								Markup.button.callback('ùêÇùêöùê´ùê≠ùêöÃÉùê® üí≥', 'payment_jovenzinhas_card'),
							],
						],
					}
				)
			);
		}, 3_699);
	});

	setInterval(() => {analysisOrders(bot_name, bot, log_channel_id)}, 10_000);
	setInterval(() => {analysisLeadsBuyed(bot, log_channel_id,bot_name)}, 10_000);

	bot.action('amostras_proibidao', async (ctx) => {
		await ctx.replyWithVideo({
			source: fs.createReadStream(
				path.resolve('assets/md/midia01-proibidao.MP4')
			),
		});
		await ctx.replyWithVideo({
			source: fs.createReadStream(
				path.resolve('assets/md/midia02-proibidao.MP4')
			),
		});

		await ctx.replyWithVideo({
			source: fs.createReadStream(
				path.resolve('assets/md/midia03-proibidao.MP4')
			),
		});

		setTimeout(async () => {
			const tx = createTxid();
			const message = await ctx.reply(
				'ùô¥ùöúùöúùöé ùöêùöõùöûùöôùöò ùöÖùô∏ùôø √© o √∫nico onde voc√™ vai encontrar esse tipo de cont√©udo amador & verdadeiro de ùöÅ$ùü∑ùü∏ùü∂ ùöôùöòùöõ ùöÅ$19,9ùü∂ ùë∫ùë∂ùë¥ùë¨ùëµùëªùë¨ ùëØùë∂ùë±ùë¨',
				Markup.inlineKeyboard([
					Markup.button.callback('ùó§ùó®ùóòùó•ùó¢ ùóñùó¢ùó†ùó£ùó•ùóîùó• ‚úÖ', `select_${tx}`),
				])
			);

			if (!message) return;
			const messageId = message.message_id;
			bot.action(`select_${tx}`, async (ctx_2) =>
				await ctx_2.telegram.editMessageReplyMarkup(
					ctx.chat?.id,
					messageId,
					undefined,
					{
						inline_keyboard: [
							[
								Markup.button.callback(
									'ùôÄùôéùòæùôäùôáùôÉùòº ùòæùôäùôàùôä ùòøùôÄùôéùôÄùôÖùòº ùòºùòøùôåùôêùôÑùôçùôÑùôç ‚úÖ',
									'clicked_again'
								),
							],
							[
								Markup.button.callback('ùêèùê¢ùê± ‚ùñ', 'payment_proibidao_pix'),
								Markup.button.callback('ùêÇùêöùê´ùê≠ùêöÃÉùê® üí≥', 'payment_proibidao_card'),
							],
						],
					}
				)
			);
		}, 3_699);
	});

	bot.action('payment_jovenzinhas_pix', async (ctx: any) => {
		return await generatePayment(
			ctx,
			mpcredentials.sandbox ? 0.1 : 19.9,
			false,
			bot_name,
			'TEEN'
		);
	});

	bot.action('payment_proibidao_pix', async (ctx: any) => {
		return await generatePayment(
			ctx,
			mpcredentials.sandbox ? 0.1 : 19.9,
			false,
			bot_name,
			'INCEST'
		);
	});

	bot.action('payment_jovenzinhas_card', async (ctx: any) => {
		return await createCustomPayment(
			ctx,
			mpcredentials.sandbox ? 0.1 : 19.9,
			'‚úÖ Clique no bot√£o abaixo para concluir sua compra no cart√£o & ter acesso ao cont√©udo mais raro do telegram üò±',
			true,
			bot_name,
			'TEEN'
		);
	});

	bot.action('payment_proibidao_card', async (ctx: any) => {
		return await createCustomPayment(
			ctx,
			mpcredentials.sandbox ? 0.1 : 19.9,
			'‚úÖ Clique no bot√£o abaixo para concluir sua compra no cart√£o & ter acesso ao cont√©udo mais raro do telegram üò±',
			true,
			bot_name,
			'INCEST'
		);
	});

	bot.action('jovenzinhas_confirmation', async (ctx: any) => {
		return await ctx.sendMessage(
			'ùó©ùóºùó∞ùó≤ÃÇ ùóæùòÇùó≤ùóø ùòÇùó∫ ùó¥ùóøùòÇùóΩùóº ùó±ùó≤ ùó∑ùóºùòÉùó≤ùóªùòáùó∂ùóªùóµùóÆùòÄ ùóØùó≤ùó∫ùó∫ùó∫ ùóªùóºùòÉùó∂ùóªùóµùóÆùòÄ ùòÄùó≤ùóªùòÅùóÆùóªùó±ùóº ùòÄùó≤ùó∫ ùó±ùóºÃÅ ü§´üòè',
			Markup.inlineKeyboard([
				Markup.button.callback('ùó†ùóîùó°ùóóùóî ùóîùó†ùó¢ùó¶ùóßùó•ùóî ü•µ', 'amostras_jovenzinhas'),
				Markup.button.callback(
					'ùó°ùóîÃÉùó¢ ùó£ùó•ùóòùóôùóúùó•ùó¢ ùóúùó°ùóñùóòùó¶ùóßùó¢ ü§´',
					'jovenzinhas_confirmation'
				),
			])
		);
	});

	bot.action('proibidao_confirmation', async (ctx: any) => {
		return await ctx.sendMessage(
			'ùó©ùóºùó∞ùó≤ÃÇ ùóæùòÇùó≤ùóø ùòÇùó∫ ùó¥ùóøùòÇùóΩùóº com todo tipo de cont√©udo que ninguem tem coragem de mostrar?',
			Markup.inlineKeyboard([
				Markup.button.callback('ùó†ùóîùó°ùóóùóî ùóîùó†ùó¢ùó¶ùóßùó•ùóî ü•µ', 'amostras_proibidao'),
				Markup.button.callback(
					'ùêçùêÄÃÉùêé ùêèùêëùêÑùêÖùêàùêëùêé ùêÜùêÄùêëùêéùêìùêàùêçùêáùêÄùêíü§´',
					'jovenzinhas_confirmation'
				),
			])
		);
	});

	bot.action('get_gifts', async (ctx) => {
		return await ctx.sendMessage(
			'ùóòùó¶ùóñùó¢ùóüùóõùóî ùó¶ùóòùó® ùó£ùó•ùóòùó¶ùóòùó°ùóßùóò üéÅ \n\nùêøùëíùëöùëèùëüùëéùëõùëëùëú ùëûùë¢ùëí ùë£ùëúùëêùëíÃÇ ùë°ùëíùëö ùë†ùëúùëöùëíùëõùë°ùëí ùü∑ ùò©ùëúùëüùëé ùëùùëéùëüùëé ùëüùëíùë†ùëîùëéùë°ùëéùëü ùëíùëôùëí~\n\nùóòùó¶ùóñùó¢ùóüùóõùóî ùó®ùó† ùóóùó¢ùó¶ ùóóùó¢ùóúùó¶ ùó¢ùó® ùó¢ùó¶ ùóóùó¢ùóúùó¶ üòè',
			Markup.inlineKeyboard([
				Markup.button.callback(
					'ùóúùó°ùóñùóòùó¶ùóßùó¢ ùü≠ùü¨ùü¨% ùó£ùó•ùó¢ùóúùóïùóúùóóùó¢ ü•µ',
					'proibidao_confirmation'
				),
				Markup.button.callback('ùóùùó¢ùó©ùóòùó°ùó≠ùóúùó°ùóõùóîùó¶ ü§´', 'jovenzinhas_confirmation'),
			])
		);
	});

	const reportMessage = async () => {
		const currentDate = new Date();
		const firstDayOfMonth = new Date(
			currentDate.getFullYear(),
			currentDate.getMonth(),
			1
		);
		const startOfDay = new Date(currentDate.setHours(0, 0, 0, 0));

		const orders_today = await prisma.sell.findMany({
			where: {
				bot_name: bot_name,
				createdAt: {
					gte: startOfDay,
				},
			},
		});

		const total_orders_value_today = orders_today.reduce(
			(total, order) => total + order.value,
			0
		);

		const orders_this_month = await prisma.sell.findMany({
			where: {
				bot_name: bot_name,
				createdAt: {
					gte: firstDayOfMonth,
				},
			},
		});

		const total_orders_value_this_month = orders_this_month.reduce(
			(total, order) => total + order.value,
			0
		);

		const total_orders_value = await prisma.sell.aggregate({
			where: {
				bot_name: bot_name,
			},
			_sum: {
				value: true,
			},
		});
		const messageReport = [
			`ùôçùôÄùôáùòºùôèùôäÃÅùôçùôÑùôä ${process.env.BOT_NAME as string} ü§ñ`,
			`Ôº®ÔºØÔº™Ôº•Ôºöùêë$${total_orders_value_today.toFixed(2)}`,
			`ùëªùë∂ùëªùë®ùë≥ ùë¨ùë∫ùë∫ùë¨ ùë¥ùë¨ÃÇùë∫: R$ ${total_orders_value_this_month.toFixed(2)}`,
			`ùôåùôêùòºùôâùôèùôÑùòøùòºùòøùôÄ ùòøùôÄ ùôëùôÄùôâùòøùòºùôé ùôÄùôéùôéùôÄ ùôàùôÄÃÇùôé: ${orders_this_month.length}`,
			`ùêïùêÄùêãùêéùêë ùêìùêéùêìùêÄùêã: R$ ${total_orders_value._sum.value?.toFixed(2)}`,
		].join('\n');

		await bot.telegram.sendMessage(log_channel_id as string, messageReport);
	};

	const gerarRelatorio = async () => {
		console.log('Gerando relat√≥rio de ganhos üí∏.');
		await reportMessage();
	};
	// Agendamento da tarefa para ser executada todos os dias √†s 23:50
	cron.schedule(
		'30 23 * * *',
		() => {
			gerarRelatorio();
		},
		{
			scheduled: true,
			timezone: 'America/Sao_Paulo', // Substitua pela sua timezone, se necess√°rio.
		}
	);

	bot.action('generate_payment_pix', async (ctx: any) => {
		return generatePayment(
			ctx,
			mpcredentials.sandbox ? 0.1 : Number(process.env.PRICE_BOT),
			false,
			bot_name,
		);
	});

	bot.action('generate_payment_pix_discount', async (ctx: any) => {
		return generatePayment(ctx, mpcredentials.sandbox ? 0.1 : 6.99, false, bot_name);
	});

	bot.action('generate_payment_pix_discount_proibidao', async (ctx: any) => {
		return generatePayment(
			ctx,
			mpcredentials.sandbox ? 0.1 : 14.99,
			false,
			bot_name,
			'INCEST'
		);
	});

	bot.action('generate_payment_pix_discount_jovenzinhas', async (ctx: any) => {
		return generatePayment(
			ctx,
			mpcredentials.sandbox ? 0.1 : 14.99,
			false,
			bot_name,
			'TEEN'
		);
	});

	bot.action('generate_payment_card', async (ctx: any) => {
		return generatePayment(ctx, mpcredentials.sandbox ? 0.1 : 9.9, true, bot_name);
	});

	bot.action('generate_payment_card_discount', async (ctx: any) => {
		return generatePayment(ctx, mpcredentials.sandbox ? 0.1 : 6.99, true, bot_name);
	});

	bot.action('generate_payment_card_discount_proibidao', async (ctx: any) => {
		return generatePayment(
			ctx,
			mpcredentials.sandbox ? 0.1 : 14.99,
			true,
			bot_name,
			'INCEST'
		);
	});

	bot.action('generate_payment_card_discount_jovenzinhas', async (ctx: any) => {
		return generatePayment(
			ctx,
			mpcredentials.sandbox ? 0.1 : 14.99,
			true,
			bot_name,
			'TEEN'
		);
	});

	try {
		bot.launch();
	} catch (error) {
		console.log('Erro as ' + new Date().getTime());
	}
}

export async function analysisLeadsBuyed(bot: any,log_channel_id: string, bot_name: string) {
	const currentTime = new Date();
	try {
		const leads = await prisma.lead.findMany({
			where: {
				bot_name: bot_name
			}
		});
		for (const lead of leads) {
			const leadCreationTime = new Date(lead.createdAt);

			if (
				currentTime.getTime() - leadCreationTime.getTime() >= 10000 &&
        !lead.sendedPresent
			) {
				await bot.telegram
					.sendMessage(
						lead.chatId,
						'üéâ Decidimos dar um presente √∫nico para voc√™ em todo o telegram, clique em "ùó£ùóòùóöùóîùó• ùó£ùó•ùóòùó¶ùóòùó°ùóßùóò üéÅ" para receber seu presente',
						Markup.inlineKeyboard([
							Markup.button.callback('ùó£ùóòùóöùóîùó• ùó£ùó•ùóòùó¶ùóòùó°ùóßùóò üéâ', 'get_gifts'),
						])
					)
					.catch(function (error: { response: { statusCode: number } }) {
						if (error.response && error.response.statusCode === 403) {
							sendLog({
								log_type: 'USERBLOCK',
								bot,
								log_channel_id: log_channel_id,
							});
						}
					});

				await prisma.lead.update({
					where: {
						id: lead.id,
					},
					data: {
						sendedPresent: true,
					},
				});
			}
		}
	} catch (error: any) {
		console.log('Erro ao buscar os leads: ' + error.message);
	}
}

export async function analysisOrders(bot_name: string, bot: any, log_channel_id: string) {
	const currentTime = new Date();
	///
	try {
		const orders = await prisma.order.findMany({
			where: {
				bot_name: bot_name
			}
		}); // Busca todas as orders
		console.log(`Analisando ${orders.length} pedidos`);
		for (const order of orders) {
			console.log('Status da order:', order.status);
			try {
				const orderCreationTime = new Date(order.createdAt);
				const details = await obterPagamento(
					order.txId,
					order.bot_name
				);

				console.log(details.status);
				if (order.status === 'COMPLETE' || details.status === 'approved') {
					console.log('Status approved ' + order.id);
					await buyedGroup(bot, bot_name, order, log_channel_id);
					await prisma.order.delete({
						where: { id: order.id },
					});
					await prisma.lead.create({
						data: {
							chatId: order.chatId,
							bot_name: order.bot_name,
						},
					});
					if (order.upssel === 'INCEST') {
						sendLog({
							order,
							log_type: 'INCESTUPSSELBUYED',
							bot,
							log_channel_id: log_channel_id,
						});
					} else if (order.upssel === 'TEEN') {
						sendLog({
							order,
							log_type: 'TEENUPSSELBUYED',
							log_channel_id: log_channel_id,
							bot,
						});
					} else {
						sendLog({
							order,
							log_channel_id: log_channel_id,
							log_type: 'EFFETUED',
							bot,
						});
					}
				}

				if (
					currentTime.getTime() - orderCreationTime.getTime() >= 43200000 &&
            order.remarketStage === 2
				) {
					await prisma.order.delete({
						where: { id: order.id },
					});
				}
				if (
					currentTime.getTime() - orderCreationTime.getTime() >= 240000 &&
          order.remarketStage === 0
				) {
					firstRemarket(bot, order.chatId, log_channel_id);
					await prisma.order.update({
						where: {
							id: order.id,
						},
						data: {
							remarketStage: 1,
						},
					});
					console.log(`Order ${order.id} processada ap√≥s 4 minutos.`);
				}

				if (
					currentTime.getTime() - orderCreationTime.getTime() >= 3600000 &&
          order.remarketStage === 1
				) {
					sendLog({
						log_type: 'NOTEFETUED',
						order,
						bot,
						log_channel_id: log_channel_id,
					});
					if (order.upssel) {
						remarketUpssel(bot, order.chatId, order.upssel, log_channel_id);
					} else {
						secondRemarket(bot, order.chatId, log_channel_id);
					}
					await prisma.order.update({
						where: {
							id: order.id,
						},
						data: {
							remarketStage: 2,
						},
					});
				}
			} catch (error) {
				console.log(error);
				console.log(`Erro ao processar order ${order.id}`);
			}
		}
	} catch (error) {
		console.error('Erro ao analisar orders:', error);
	}
}

// async function firstUpssel(bot:any, chat_id: number) {

// }

async function secondRemarket(bot: any, chat_id: number,log_channel_id: string) {
	await bot.telegram
		.sendMessage(
			chat_id,
			'üëãüèª Ol√°, vimos que voc√™ gerou o Pagamento e ainda n√£o concluiu a compra... Para demonstrar que queremos que voc√™ seja nosso assinante, abaixamos o valor para ùó•$ 6,ùüµ9 Caso voc√™ agora queira levar agora, te daremos: +ùüÆ ùóöùóøùòÇùóΩùóºùòÄ ùó©ùóúùó£ùó¶ - +ùü≠ ùóöùóøùòÇùóΩùóº ùó£ùóÆùóøùóÆ ùóßùóøùóºùó∞ùóÆùòÄ ùó±ùó≤ ùó†ùó∂ÃÅùó±ùó∂ùóÆùòÄ ùó£ùóøùóºùó∂ùóØùó∂ùó±ùóÆùòÄ - + ùü≠ùü∞ùóöùóï ùó±ùó≤ ùó†ùó∂ÃÅùó±ùó∂ùóÆùòÄ ùó±ùó≤ ùó£ùòÇùòÅùóÆùóøùó∂ùóÆ ùóóùüØùüØùó£ùó™ùó≤ùóØ.\n\n‚úÖ Clique em: \'ùêêùêîùêÑùêëùêé ùêÄùêÉùêêùêîùêàùêëùêàùêë üéâ\' E realize o Pagamento e Garanta acesso em nosso VIP.'
		)
		.catch(function (error: { response: { statusCode: number } }) {
			if (error.response && error.response.statusCode === 403) {
				sendLog({
					log_type: 'USERBLOCK',
					bot,
					log_channel_id: log_channel_id,
				});
			}
		});
	await bot.telegram
		.sendPhoto(
			chat_id,
			{
				source: fs.createReadStream(
					path.resolve('assets/images/remarket-banner.jpg')
				),
			},
			Markup.inlineKeyboard([
				Markup.button.callback(
					'ùêêùêîùêÑùêëùêé ùêÄùêÉùêêùêîùêàùêëùêàùêë üéâ',
					'generate_payment_pix_discount'
				),
			])
		)
		.catch(function (error: { response: { statusCode: number } }) {
			if (error.response && error.response.statusCode === 403) {
				sendLog({
					log_type: 'USERBLOCK',
					bot,
					log_channel_id: log_channel_id,
				});
			}
		});
}

async function remarketUpssel(bot: any, chat_id: number, upssel: Upssel, log_channel_id: string) {
	const tx = createTxid();
	await bot.telegram
		.sendMessage(
			chat_id,
			'üëãüèª Ol√°, vimos que voc√™ gerou o Pagamento e ainda n√£o concluiu a compra... Para demonstrar que queremos que voc√™ seja nosso assinante, abaixamos o valor para ùó•$ 14,ùüµ9 Caso voc√™ agora queira levar agora, te daremos: +ùüÆ ùóöùóøùòÇùóΩùóºùòÄ ùó©ùóúùó£ùó¶ - +ùü≠ ùóöùóøùòÇùóΩùóº ùó£ùóÆùóøùóÆ ùóßùóøùóºùó∞ùóÆùòÄ ùó±ùó≤ ùó†ùó∂ÃÅùó±ùó∂ùóÆùòÄ ùó£ùóøùóºùó∂ùóØùó∂ùó±ùóÆùòÄ - + ùü≠ùü∞ùóöùóï ùó±ùó≤ ùó†ùó∂ÃÅùó±ùó∂ùóÆùòÄ ùó±ùó≤ ùó£ùòÇùòÅùóÆùóøùó∂ùóÆ ùóóùüØùüØùó£ùó™ùó≤ùóØ.\n\n‚úÖ Clique em: \'ùêêùêîùêÑùêëùêé ùêÄùêÉùêêùêîùêàùêëùêàùêë üéâ\' E realize o Pagamento e Garanta acesso em nosso VIP.'
		)
		.catch(function (error: { response: { statusCode: number } }) {
			if (error.response && error.response.statusCode === 403) {
				sendLog({
					log_type: 'USERBLOCK',
					bot,
					log_channel_id: log_channel_id,
				});
			}
		});
	const message = await bot.telegram
		.sendPhoto(
			chat_id,
			{
				source: fs.createReadStream(
					path.resolve('assets/images/remarket-banner-upssel.jpg')
				),
			},
			Markup.inlineKeyboard([
				Markup.button.callback('ùêêùêîùêÑùêëùêé ùêÄùêÉùêêùêîùêàùêëùêàùêë üéâ', `select_${tx}`),
			])
		)
		.catch(function (error: { response: { statusCode: number } }) {
			if (error.response && error.response.statusCode === 403) {
				sendLog({
					log_type: 'USERBLOCK',
					bot,
					log_channel_id: log_channel_id,
				});
			}
		});
	if (!message) return;
	const messageId = message.message_id;
	bot.action(
		`select_${tx}`,
		async (ctx_2: {
      telegram: {
        editMessageReplyMarkup: (
          arg0: any,
          arg1: any,
          arg2: undefined,
          arg3: {
            inline_keyboard: (InlineKeyboardButton.CallbackButton & {
              hide: boolean;
            })[][];
          }
        ) => any;
      };
    }) =>
			await ctx_2.telegram.editMessageReplyMarkup(chat_id, messageId, undefined, {
				inline_keyboard: [
					[
						Markup.button.callback(
							'ùôÄùôéùòæùôäùôáùôÉùòº ùòæùôäùôàùôä ùòøùôÄùôéùôÄùôÖùòº ùòºùòøùôåùôêùôÑùôçùôÑùôç ‚úÖ',
							'clicked_again'
						),
					],
					[
						Markup.button.callback(
							'ùêèùê¢ùê± ‚ùñ',
							upssel === 'TEEN'
								? 'generate_payment_pix_discount_jovenzinhas'
								: 'generate_payment_pix_discount_proibidao'
						),
						Markup.button.callback(
							'ùêÇùêöùê´ùê≠ùêöÃÉùê® üí≥',
							upssel === 'TEEN'
								? 'generate_payment_card_discount_jovenzinhas'
								: 'generate_payment_card_discount_proibidao'
						),
					],
				],
			})
	);
}

async function firstRemarket(bot: any, chat_id: number, log_channel_id: string) {
	await bot.telegram
		.sendMessage(
			chat_id,
			'‚õîÔ∏è ùó¶ùó≤ùòÇ ùóΩùóÆùó¥ùóÆùó∫ùó≤ùóªùòÅùóº ùóÆùó∂ùóªùó±ùóÆ ùóªùóÆÃÉùóº ùó≥ùóºùó∂ ùó∞ùóøùó≤ùó±ùó∂ùòÅùóÆùó±ùóº ùó≤ùó∫ ùóªùóºùòÄùòÄùóº ùòÄùó∂ùòÄùòÅùó≤ùó∫ùóÆ. O Pagamento para ser aprovado, demora em torno de 10 a 60 segundos ùóÆùóΩùóºÃÅùòÄ ùóÆ ùó∞ùóºùó∫ùóΩùóøùóÆ ùó≥ùó≤ùó∂ùòÅùóÆ. '
		)
		.catch(function (error: { response: { statusCode: number } }) {
			if (error.response && error.response.statusCode === 403) {
				sendLog({
					log_type: 'USERBLOCK',
					bot,
					log_channel_id: log_channel_id,
				});
			}
		});
}

async function buyedGroup(bot: any, bot_name: string, order: Order, log_channel_id:string) {
	console.log('Sending group for ' + order.id);
	await bot.telegram
		.sendMessage(order.chatId, 'Esperamos que goste ‚ù§')
		.catch(function (error: { response: { statusCode: number } }) {
			if (error.response && error.response.statusCode === 403) {
				sendLog({
					log_type: 'USERBLOCK',
					bot,
					log_channel_id: log_channel_id,
				});
			}
		});

	if (order.upssel === 'INCEST') {
		await prisma.sell.create({
			data: {
				bot_name: bot_name,
				value: 19.9,
			},
		});
		await bot.telegram
			.sendMessage(
				order.chatId,
				'ùêïùêàùêè ùêÉùêÄùêëùêäùêàùêçùêÇùüëùêíùêìùüéüí• - https://t.me/+NvEVEfw0kuE4NmU5'
			)
			.catch(function (error: { response: { statusCode: number } }) {
				if (error.response && error.response.statusCode === 403) {
					sendLog({
						log_type: 'USERBLOCK',
						bot,
						log_channel_id: log_channel_id,
					});
				}
			});
	} else if (order.upssel === 'TEEN') {
		await prisma.sell.create({
			data: {
				bot_name: bot_name,
				value: 19.9,
			},
		});
		await bot.telegram
			.sendMessage(
				order.chatId,
				'‚≠êÔ∏èNOVINHAS PROIBID√ÉO VIP - https://t.me/+Z2tXFl5VVyVjNjYx'
			)
			.catch(function (error: { response: { statusCode: number } }) {
				if (error.response && error.response.statusCode === 403) {
					sendLog({
						log_type: 'USERBLOCK',
						bot,
						log_channel_id: log_channel_id,
					});
				}
			});
	} else {
		await prisma.sell.create({
			data: {
				bot_name: bot_name,
				value: Number(process.env.PRICE_BOT),
			},
		});
		await bot.telegram
			.sendMessage(
				order.chatId,
				'ùêïùêàùêè D4RKMIDIAS üî• üëá\nhttps://t.me/+yVVvVODhmOxmYTIx \n\nBrinde 1 üëá\nhttps://t.me/You_Sexybeach \n\nBrinde 2 üëá\nhttps://t.me/+__MUqkeNEqA1NDk0 \n\nBrinde 3 üëá\nhttps://t.me/joinchat/BHQ95nfIP6YwZDk6 \n\n'
			)
			.catch(function (error: { response: { statusCode: number } }) {
				if (error.response && error.response.statusCode === 403) {
					sendLog({
						log_type: 'USERBLOCK',
						bot,
						log_channel_id: log_channel_id,
					});
				}
			});
	}
}

interface LogProps {
  log_type:
    | 'STARTBOT'
    | 'NOTEFETUED'
    | 'EFFETUED'
    | 'USERBLOCK'
    | 'TEENUPSSELBUYED'
    | 'INCESTUPSSELBUYED';
  order?: Order;
  userName?: string;
  userUser?: string;
  bot: any;
  log_channel_id: string
}

let index = 1;
export async function sendLog(props: LogProps): Promise<void> {
	const timestamp = moment().tz('America/Sao_Paulo').format('HH:mm:ss');

	let message = '';

	switch (props.log_type) {
	case 'STARTBOT':
		if (props.userName || props.userUser) {
			message = `Ôº¢ÔºØÔº¥ Ôº©ÔºÆÔº©Ôº£Ôº©Ôº°Ôº§ÔºØüí•\nNome do lead: ${props.userName}\nUsu√°rio: @${props.userUser}\nN* do cliente: ${index}\nHora (Bras√≠lia): ${timestamp}`;
		}
		break;

	case 'EFFETUED':
		if (!props.order) return;
		message = `Ôº£ÔºØÔº≠Ôº∞Ôº≤Ôº° Ôº•Ôº¶Ôº•Ôº¥ÔºµÔº°Ôº§Ôº° ‚úÖ\nNome do lead: ${props.order.buyerName}\nUsu√°rio: @${props.order.buyerUser}\nN* do cliente: ${index}\nHora (Bras√≠lia): ${timestamp}`;
		break;

	case 'NOTEFETUED':
		if (!props.order) return;
		message = `Ôº£ÔºØÔº≠Ôº∞Ôº≤Ôº° ÔºÆÔº°ÃÉÔºØ Ôº•Ôº¶Ôº•Ôº¥ÔºµÔº°Ôº§Ôº° ‚õîÔ∏è\nNome do lead: ${props.order.buyerName}\nUsu√°rio: @${props.order.buyerUser}\nN* do cliente: ${index}\nHora (Bras√≠lia): ${timestamp}`;
		break;

	case 'USERBLOCK':
		if (!props.order) return;
		message = `USU√ÅRIO BLOQUEOU O BOT ‚õîÔ∏è\nNome do lead: ${props.order.buyerName}\nUsu√°rio: @${props.order.buyerUser}\nN* do cliente: ${index}\nHora (Bras√≠lia): ${timestamp}`;
		break;

	case 'TEENUPSSELBUYED':
		if (!props.order) return;
		message = `ÔºµÔº∞Ôº≥Ôº•Ôº¨Ôº¨ Ôº™ÔºØÔº∂Ôº•ÔºÆÔº∫Ôº©ÔºÆÔº®Ôº°Ôº≥ ‚úÖ\nNome do lead: ${props.order.buyerName}\nUsu√°rio: @${props.order.buyerUser}\nN* do cliente: ${index}\nHora (Bras√≠lia): ${timestamp}`;
		break;
	case 'INCESTUPSSELBUYED':
		if (!props.order) return;
		if (!props.order) return;
		message = `ÔºµÔº∞Ôº≥Ôº•Ôº¨Ôº¨ Ôº∞Ôº≤ÔºØÔº©Ôº¢Ôº©Ôº§Ôº°ÃÉÔºØ ‚úÖ\nNome do lead: ${props.order.buyerName}\nUsu√°rio: @${props.order.buyerUser}\nN* do cliente: ${index}\nHora (Bras√≠lia): ${timestamp}`;
		break;
	default:
		break;
	}

	if (message) {
		await props.bot.telegram
			.sendMessage(Number(props.log_channel_id), message)
			.catch(function (error: { response: { statusCode: number } }) {
				if (error.response && error.response.statusCode === 403) {
					sendLog({
						log_type: 'USERBLOCK',
						bot: props.bot,
						log_channel_id: props.log_channel_id
					});
				}
			});
		index++;
	}
}

export default startBot;
